/**
 * Return the shortest distance from the eyepoint to the scene surface along
 * the marching direction. If no part of the surface is found between start and end,
 * return end.
 * 
 * eye: the eye point, acting as the origin of the ray
 * marchingDirection: the normalized direction to march in
 * start: the starting distance away from the eye
 * end: the max distance away from the ey to march before giving up
 */
float shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        float dist = sceneSDF(eye + depth * marchingDirection);
        if (dist < EPSILON) {
			return depth;
        }
        depth += dist;
        if (depth >= end) {
            return end;
        }
    }
    return end;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0, 0.0, -5.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    vec2 mousePos = iMouse.xy / vp.resolution.xy;
    mousePos = mousePos * 2.0 - 1.0;
    pointLight light;
    initPointLight(light, vec3(mousePos, -10.0), vec4(1.0), 5.0);
    
    float dist = shortestDistanceToSurface(vp.viewportPoint.xyz, ray.direction.xyz, MIN_DIST, MAX_DIST);
    
    if (dist > MAX_DIST - EPSILON) {
        // Didn't hit anything
        fragColor = vec4(0.0, 0.0, 0.0, 0.0);
		return;
    }
    
    // The closest point on the surface to the eyepoint along the view ray
    vec3 p = eyePosition + dist * ray.direction.xyz;
    
    //fragColor = vec4(1.0, 0.0, 0.0, 1.0);
    //fragColor = vec4(estimateNormal(p), 1.0);
    fragColor = calcLight(light, ray, vec4(0.5,0.0,1.0,1.0), p);
}