/*
Author: Ryan Littleton - using starter from Daniel Buckstein
Class : GPR-200-01
Assignment : Lab 4
*/

// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}
    
// holds point light data
struct pointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};
    
// inits the point light
void initPointLight(out pointLight light, in vec3 center, in vec4 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

// calcLight: calculates specular and diffuse for the light passed in
//    fDiffuseIntensity: output for the diffuse
//    fSpecIntensity:    output for the specular
//	  normal: 			 input for sphere normal
//	  position: 		 input for position on sphere
//	  normal: 			 input for view vector
//	  normal: 			 input for the current light
void calcLight(out float fDiffuseIntensity, out float fSpecIntensity, in vec3 normal, in vec3 position, in vec3 vView, in pointLight light)
{
    // Light direction to position
    vec3 vLightDir;
    vLightDir = light.center.xyz - position;
    vLightDir = normalize(vLightDir);
    
    // diffuse coefficient
    float fDiffuseCoef = max(0.0, dot(normal, vLightDir));
    float fDistanceToLight = distance(light.center.xyz, position);

    // attenuation
    float fAIntensity = 1.0/(1.0 + fDistanceToLight / light.intensity + (fDistanceToLight * fDistanceToLight) / (light.intensity * light.intensity));

    fDiffuseIntensity = fDiffuseCoef * fAIntensity; // Final diffuse intensity
                
    vec3 vHalfway = normalize(vLightDir + vView); // Halfway vector
    float fSpecCoef = max(0.0, dot(normal, vHalfway)); // Spec coefficient Blinn-phong
    float fHiExp = 64.0; // Highlight exponent
    fSpecIntensity = pow(fSpecCoef, fHiExp * 4.0); // Blinn-Phong
}

// holds sphere data
struct sSphere
{
    vec4 center;
    float radius;
};

// init sphere and check if it's valid
bool initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    if (radius > 0.0) // Checks if radius is valid
    {
    	sphere.radius = radius;
		return true;
    }
    sphere.radius = 1.0; // If not valid, set to 1
    return false;
}

//get dot product of x
float lenSq(vec2 x)
{
    return dot(x, x);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
//	  time: 		iTime passed in from mainImage for animating lights
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in float time)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
    
    // SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    
    pointLight[3] lights; // Multiple lights
    initPointLight(lights[0], vec3(22.0 * sin(time), 6.0, -5.0), vec4(1.0), 30.0); // Mult by sin time to animate
    initPointLight(lights[1], vec3(0.0, 20.0 * cos(time), 5.0), vec4(1.0), 30.0);
    initPointLight(lights[2], vec3(-18.0 * sin(time), -4.0 * sin(time), -5.0), vec4(1.0), 30.0);
    
    // Procedural sphere
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy), rSq = sphere.radius * sphere.radius;
    
    if (lSq <= rSq)
    {
        dp.z = rSq - lSq; // this is actually dp.z squared
        
        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z)); // position on sphere
        
        vec3 normal = (position - sphere.center.xyz) / sphere.radius; // optimized normal calc
        
        vec3 surfaceColor = normal; // Set surface color to normal for gradient
        vec3 specReflectColor = vec3(1.0);
        vec3 vView = normalize(rayOrigin.xyz - position); // view vector
        //vec3 vReflectLight = reflect(-vLightDir, normal); // Reflected light vector - not needed for blinn phong
        
        float ambientIntensity = 0.1; // ambient light
        vec3 ambientColor = vec3(0.7, 0.2, 1.0); // global ambient light color
        
        vec3 vReflectTotal = vec3(0.0); // This will keep track of the total of all light influence
        
        // Loop for calculating lights
        for(int i = lights.length() - 1; i >= 0; i--)
        {
            float fDiffuseIntensity; // diffuse for current light
        	float fSpecIntensity; // specular for current light
            
            calcLight(fDiffuseIntensity, fSpecIntensity, normal, position, vView, lights[i]); // calc from light
            
            vReflectTotal += (fDiffuseIntensity * surfaceColor + fSpecIntensity * specReflectColor) *
                			lights[i].color.xyz; // Add the current light calc to the sum
        }
        
        vec3 finalColor = ambientIntensity * ambientColor + vReflectTotal; // final color from ambient and lights
        return vec4(finalColor, 1.0); // to vec4 and return
    }
    
	// BACKGROUND
	const vec3 warm = vec3(0.7, 0.2, 0.3), cool = vec3(0.3, 0.2, 0.7);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
}

    
// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin, iTime);
}
