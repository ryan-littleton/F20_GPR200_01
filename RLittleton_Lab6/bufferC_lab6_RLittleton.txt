/*
Author: Ryan Littleton
Class : GPR-200-01
Assignment : Lab 6
*/

// This blur function is taken from https://www.shadertoy.com/view/XdfGDH
// calcBlur: calculate the blur
color4 calcBlur(in sCoord fragCoord)
{
		//declare stuff
		const int mSize = 11;
		const int kSize = (mSize-1)/2;
		float kernel[mSize];
		vec3 final_colour = vec3(0.0);
		
		//create the 1-D kernel
		float sigma = 7.0;
		float Z = 0.0;
		for (int j = 0; j <= kSize; ++j)
		{
			kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);
		}
		
		//get the normalization factor (as the gaussian has been clamped)
		for (int j = 0; j < mSize; ++j)
		{
			Z += kernel[j];
		}
		
		//read out the texels
		for (int i=-kSize; i <= kSize; ++i)
		{
			for (int j=-kSize; j <= kSize; ++j)
			{
				final_colour += kernel[kSize+j]*kernel[kSize+i]
                    *texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iChannelResolution[0].xy).rgb;
			}
		}
		
		return vec4(final_colour/(Z*Z), 1.0);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    fragColor = calcBlur(fragCoord);
}